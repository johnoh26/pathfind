{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","temp","getHeapSortAnimations","currentIdx","siftDown","buildMaxHeap","swap","heap","childOneIdx","childTwoIdx","idxToSwap","SortingVisualizer","props","state","NUMBER_OF_ARRAY_BARS","isRunning","handleSlider","bind","toggleIsRunning","this","resetArray","min","max","random","setState","event","preventDefault","value","target","setTimeout","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","backgroundColor","newHeight","height","isColorChange","isSorted","counter","getBubbleSortAnimations","console","log","className","map","idx","key","Button","variant","size","onClick","mergeSort","quickSort","heapSort","bubbleSort","type","step","onChange","React","Component","App","Navbar","bg","expand","Nav","justify","defaultActiveKey","Item","Link","href","rel","integrity","crossOrigin","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c195093.chunk.js","sourcesContent":["/********************** MERGE SORT **********************/\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([j - 1, j - 1]);\n    animations.push([j - 1, j - 1]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([i - 1, i - 1]);\n    animations.push([i - 1, i - 1]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n/********************** BUBBLE SORT **********************/\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  let isSorted = false;\n  let counter = 0;\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < array.length - 1 - counter; ++i) {\n      if (array[i] > array[i + 1]) {\n        animations.push([i, i + 1]);\n        animations.push([i, i + 1]);\n        animations.push([i, array[i + 1]]);\n        animations.push([i + 1, array[i]]);\n        let temp = array[i];\n        array[i] = array[i + 1];\n        array[i + 1] = temp;\n        isSorted = false;\n      }\n    }\n    counter++;\n  }\n  return animations;\n}\n\n/********************** QUICK SORT **********************/\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n  if (startIdx > endIdx) {\n    return;\n  }\n  let pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      animations.push([leftIdx, rightIdx]);\n      animations.push([leftIdx, rightIdx]);\n      animations.push([leftIdx, array[rightIdx]]);\n      animations.push([rightIdx, array[leftIdx]]);\n      let temp = array[leftIdx];\n      array[leftIdx] = array[rightIdx];\n      array[rightIdx] = temp;\n    }\n    if (array[leftIdx] <= array[pivotIdx]) {\n      animations.push([leftIdx, leftIdx]);\n      animations.push([leftIdx, leftIdx]);\n      animations.push([leftIdx, array[leftIdx]]);\n      animations.push([leftIdx, array[leftIdx]]);\n      leftIdx++;\n    }\n    if (array[rightIdx] >= array[pivotIdx]) {\n      animations.push([rightIdx, rightIdx]);\n      animations.push([rightIdx, rightIdx]);\n      animations.push([rightIdx, array[rightIdx]]);\n      animations.push([rightIdx, array[rightIdx]]);\n      rightIdx--;\n    }\n  }\n\n  animations.push([rightIdx, pivotIdx]);\n  animations.push([rightIdx, pivotIdx]);\n  animations.push([rightIdx, array[pivotIdx]]);\n  animations.push([pivotIdx, array[rightIdx]]); // make the pivot purple\n  let temp = array[rightIdx];\n  array[rightIdx] = array[pivotIdx];\n  array[pivotIdx] = temp;\n\n  let leftSubarrayIsShorter = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1); // + / - 1 around rightIdx because pivot is at rightIdx\n  if (leftSubarrayIsShorter) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n  return animations;\n}\n\n/********************** HEAP SORT **********************/\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  buildMaxHeap(array, animations);\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\n    animations.push([endIdx, 0]);\n    animations.push([endIdx, 0]);\n    animations.push([endIdx, array[0]]);\n    animations.push([0, array[endIdx]]);\n    swap(0, endIdx, array);\n    siftDown(0, endIdx - 1, array, animations);\n  }\n  return animations;\n}\n\nfunction buildMaxHeap(array, animations) {\n  let firstParentIdx = Math.floor((array.length - 2) / 2);\n  for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n    siftDown(currentIdx, array.length - 1, array, animations);\n  }\n}\n\nfunction siftDown(currentIdx, endIdx, heap, animations) {\n  let childOneIdx = currentIdx * 2 + 1;\n  while (childOneIdx <= endIdx) {\n    const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n    let idxToSwap;\n    if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\n      idxToSwap = childTwoIdx;\n    } else {\n      idxToSwap = childOneIdx;\n    }\n\n    animations.push([idxToSwap, currentIdx]);\n    animations.push([idxToSwap, currentIdx]);\n\n    if (heap[idxToSwap] > heap[currentIdx]) {\n      animations.push([idxToSwap, heap[currentIdx]]);\n      animations.push([currentIdx, heap[idxToSwap]]);\n\n      swap(currentIdx, idxToSwap, heap);\n      currentIdx = idxToSwap;\n      childOneIdx = currentIdx * 2 + 1;\n    } else {\n      animations.push([idxToSwap, heap[idxToSwap]]);\n      animations.push([idxToSwap, heap[idxToSwap]]);\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import React from 'react';\nimport {\n  getMergeSortAnimations,\n  getQuickSortAnimations,\n  getHeapSortAnimations,\n  getBubbleSortAnimations,\n} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport {Button} from 'react-bootstrap';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 50;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: 5,\n      isRunning: false,\n    };\n\n    this.handleSlider = this.handleSlider.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    if (!this.state.isRunning) {\n      const array = [];\n      for (let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\n        array.push(randomIntFromInterval(10, 300));\n      }\n      this.setState({array});\n    }\n  }\n\n  handleSlider(event) {\n    if (!this.state.isRunning) {\n      event.preventDefault();\n      const value = event.target.value;\n      this.setState(\n        {\n          NUMBER_OF_ARRAY_BARS: value,\n        },\n        () => {\n          this.resetArray();\n        },\n      );\n    }\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  mergeSort() {\n    if (!this.state.isRunning) {\n      this.toggleIsRunning();\n      setTimeout(() => {\n        const animations = getMergeSortAnimations(this.state.array);\n        animations.push('e');\n        for (let i = 0; i < animations.length; i++) {\n          if (animations[i] === 'e') {\n            setTimeout(() => {\n              this.toggleIsRunning();\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n              const [barOneIdx, barTwoIdx] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              const barTwoStyle = arrayBars[barTwoIdx].style;\n              const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS);\n            } else {\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * ANIMATION_SPEED_MS);\n            }\n          }\n        }\n      }, 10);\n    }\n  }\n\n  quickSort() {\n    if (!this.state.isRunning) {\n      this.toggleIsRunning();\n      setTimeout(() => {\n        const animations = getQuickSortAnimations(this.state.array);\n        animations.push('e');\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 4 < 2;\n          if (animations[i] === 'e') {\n            setTimeout(() => {\n              this.toggleIsRunning();\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            if (isColorChange) {\n              const [barOneIdx, barTwoIdx] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              const barTwoStyle = arrayBars[barTwoIdx].style;\n              const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS);\n            } else {\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * ANIMATION_SPEED_MS);\n            }\n          }\n        }\n      }, 100);\n    }\n  }\n\n  heapSort() {\n    if (!this.state.isRunning) {\n      this.toggleIsRunning();\n      setTimeout(() => {\n        const animations = getHeapSortAnimations(this.state.array);\n        animations.push('e');\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 4 < 2;\n          if (animations[i] === 'e') {\n            setTimeout(() => {\n              this.toggleIsRunning();\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            if (isColorChange) {\n              const [barOneIdx, barTwoIdx] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              const barTwoStyle = arrayBars[barTwoIdx].style;\n              const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS);\n            } else {\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * ANIMATION_SPEED_MS);\n            }\n          }\n        }\n      }, 100);\n    }\n  }\n\n  bubbleSort() {\n    if (!this.state.isRunning) {\n      this.toggleIsRunning();\n      setTimeout(() => {\n        const animations = getBubbleSortAnimations(this.state.array);\n        animations.push('e');\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 4 < 2;\n          if (animations[i] === 'e') {\n            setTimeout(() => {\n              this.toggleIsRunning();\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            if (isColorChange) {\n              const [barOneIdx, barTwoIdx] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              const barTwoStyle = arrayBars[barTwoIdx].style;\n              const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS * 5);\n            } else {\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * ANIMATION_SPEED_MS * 5);\n            }\n          }\n        }\n      }, 100);\n    }\n  }\n\n  render() {\n    console.log('this.state >>>', this.state);\n    const {array} = this.state;\n\n    return (\n      <div>\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n          <div className=\"button-container\">\n            <Button\n              variant=\"warning\"\n              size=\"lg\"\n              onClick={() => this.resetArray()}>\n              Generate New Array\n            </Button>{' '}\n            <Button\n              variant=\"success\"\n              size=\"lg\"\n              onClick={() => this.mergeSort()}>\n              Merge Sort\n            </Button>{' '}\n            <Button\n              variant=\"info\"\n              size=\"lg\"\n              onClick={() => this.quickSort()}>\n              Quick Sort\n            </Button>{' '}\n            <Button\n              variant=\"primary\"\n              size=\"lg\"\n              onClick={() => this.heapSort()}>\n              Heap Sort\n            </Button>{' '}\n            <Button\n              variant=\"danger\"\n              size=\"lg\"\n              onClick={() => this.bubbleSort()}>\n              Bubble Sort\n            </Button>{' '}\n          </div>\n          <div className=\"slidecontainer\">\n            <input\n              type=\"range\"\n              min=\"2\"\n              max=\"192\"\n              step=\"10\"\n              className=\"slider\"\n              value={this.state.NUMBER_OF_ARRAY_BARS}\n              onChange={this.handleSlider}\n            />\n            Drag The Green Square To Increase/Decrease Bars\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.scss';\nimport {Nav, Navbar} from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar bg=\"primary\" expand=\"lg\">\n        <Nav justify variant=\"tabs\" defaultActiveKey=\"#\">\n          <Nav.Item>\n            <Nav.Link href=\"#\">Sorting Algorithms Visualizer</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link href=\"http://johnoh26.github.io/pathfinding/\">\n              Go To Pathfinding Visualizer\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link href=\"https://www.john-oh.com\">\n              Check Out Other Cool Projects\n            </Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n      </div>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        crossOrigin=\"anonymous\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}