{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/aStar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","AStar","sortByDistance","distanceToFinishNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","algo","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onMouseLeave","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseUp","onClick","visualize","toggleView","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a240e63c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    \n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></td>\n    );\n  }\n}\n","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n\n  while (unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (!closestNode.isWall) {\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n\n  while (unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (!closestNode.isWall) {\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction sortByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra} from '../algorithms/dijkstra';\nimport {AStar} from '../algorithms/aStar';\nimport {dfs} from '../algorithms/dfs';\nimport {bfs} from '../algorithms/bfs';\n\nimport './PathfindingVisualizer.css';\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 5,\n      FINISH_NODE_ROW: 5,\n      START_NODE_COL: 5,\n      FINISH_NODE_COL: 15,\n      mouseIsPressed: false,\n      ROW_COUNT: 25,\n      COLUMN_COUNT: 35,\n      MOBILE_ROW_COUNT: 10,\n      MOBILE_COLUMN_COUNT: 20,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      currRow: 0,\n      currCol: 0,\n      isDesktopView: true\n    };\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({grid});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n  \n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid()\n      this.clearWalls()\n      const isDesktopView = !this.state.isDesktopView\n      let grid\n      if(isDesktopView) {\n        grid = this.getInitialGrid(this.state.ROW_COUNT, this.state.COLUMN_COUNT)\n        this.setState({isDesktopView,grid})\n      } else {\n        if (\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\n        ) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns'); \n        } else{\n          grid = this.getInitialGrid(this.state.MOBILE_ROW_COUNT, this.state.MOBILE_COLUMN_COUNT)\n          this.setState({isDesktopView,grid})\n        }\n      }\n    }\n  }\n\n  /******************** Set up the initial grid ********************/\n  getInitialGrid = (rowCount= this.state.ROW_COUNT, colCount = this.state.COLUMN_COUNT) => {\n    const initialGrid = [];\n    for (let row = 0; row < rowCount; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colCount; col++) {\n        currentRow.push(this.createNode(row, col));\n      }\n      initialGrid.push(currentRow);\n    }\n    return initialGrid;\n  };\n\n  createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      distanceToFinishNode: Math.abs(this.state.FINISH_NODE_ROW - row) + Math.abs(this.state.FINISH_NODE_COL - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n    };\n  };\n  \n  /******************** Control mouse events ********************/\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-start'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-finish'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({grid: newGrid, mouseIsPressed: true});\n        }\n      } else {\n        this.clearGrid();\n      }\n    }\n  }\n  \n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className \n        if (\n          nodeClassName === 'node node-visited' || nodeClassName === 'node node-shortest-path'\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mouseIsPressed) {\n        const nodeClassName = document.getElementById(`node-${row}-${col}`).className\n        if (this.state.isStartNode) {\n          if(nodeClassName !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol]\n            prevStartNode.isStart = false\n            document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className =\n            'node';\n\n            this.setState({currRow: row, currCol: col})\n            const currStartNode = this.state.grid[row][col]\n            currStartNode.isStart = true\n            document.getElementById(`node-${row}-${col}`).className =\n            'node node-start';\n          }\n          this.setState({START_NODE_ROW:row, START_NODE_COL: col})\n        } else if(this.state.isFinishNode) {\n          if(nodeClassName !== 'node node-wall') {\n            const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol]\n            prevFinishNode.isFinish = false\n            document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\n\n            this.setState({currRow: row, currCol: col})\n            const currFinishNode = this.state.grid[row][col]\n            currFinishNode.isFinish = true\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n          }\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col})\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({grid: newGrid});\n        }\n      }\n      // if (this.state.isStartNode) {\n      // this.setState({START_NODE_ROW:row, START_NODE_COL: col});\n      // } else if(this.state.isFinishNode) {\n      // this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\n      // }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({mouseIsPressed: false});\n      if (this.state.isStartNode) {\n        const isStartNode = !this.state.isStartNode;\n        this.setState({isStartNode, START_NODE_ROW:row, START_NODE_COL: col});\n      } else if (this.state.isFinishNode) {\n        const isFinishNode = !this.state.isFinishNode;\n        this.setState({isFinishNode, FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\n      }\n      this.getInitialGrid()\n    }\n  }\n\n\n  handleMouseLeave() {\n    if (this.state.isStartNode) {\n      const isStartNode = !this.state.isStartNode;\n      this.setState({isStartNode,mouseIsPressed: false});\n    } else if (this.state.isFinishNode) {\n      const isFinishNode = !this.state.isFinishNode;\n      this.setState({isFinishNode,mouseIsPressed: false});\n    }\n    this.getInitialGrid()\n\n  }\n\n  /******************** Clear Board/Walls ********************/\n  \n   clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice()\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish' &&\n            nodeClassName !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isVisited = false\n            node.distance = Infinity\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col)\n          }\n          if (nodeClassName === 'node node-finish' ){\n            node.isVisited = false\n            node.distance = Infinity\n            node.distanceToFinishNode = 0\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false\n            node.distance = Infinity\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col)\n            node.isStart = true\n            node.isWall=false\n            node.previousNode=null\n            node.isNode= true\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice()\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName === 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n              node.isWall = false\n          }\n        }\n      }\n    }\n  }\n\n  /******************** Create Animations ********************/\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid()\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n          break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName !== 'node node-start' &&\n          nodeClassName !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  /******************** Create path from start to finish ********************/\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n  <a className=\"navbar-brand\" href=\"/\">Pathfinding Visualizer</a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n  <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"http://johnoh26.github.io/sorting/\"> Go To Sorting Visualizer </a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"https://www.john-oh.com\">Check Out Other Cool Projects</a>\n      </li>\n    </ul>\n  </div>\n</nav>\n\n        <table className=\"grid-container\" onMouseLeave={() => this.handleMouseLeave()}>\n          <tbody className=\"grid\" >\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx} >\n                  {row.map((node, nodeIdx) => {\n                    const {row, col, isFinish, isStart, isWall} = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) =>\n                          this.handleMouseDown(row, col)\n                        }\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp(row, col)}\n                        row={row}></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n          <button type=\"button\" className=\"btn btn-danger\"onClick={() => this.clearGrid()}>Clear Grid</button>\n          <button type=\"button\" className=\"btn btn-warning\"onClick={() => this.clearWalls()}>Clear Walls</button>\n          <button type=\"button\" className=\"btn btn-primary\"onClick={() => this.visualize('Dijkstra')}>Dijkstra's</button>\n          <button type=\"button\" className=\"btn btn-primary\"onClick={() => this.visualize('AStar')}>A*</button>\n          <button type=\"button\" className=\"btn btn-primary\"onClick={() => this.visualize('BFS')}>\n            Bread First Search\n          </button>\n          <button type=\"button\" className=\"btn btn-primary\"onClick={() => this.visualize('DFS')}>\n            Depth First Search\n          </button>\n        {\n          this.state.isDesktopView ?\n          <button type=\"button\" className=\"btn btn-light\" onClick={() => this.toggleView()}>Mobile View</button> :\n          <button type=\"button\" className=\"btn btn-dark\" onClick={() => this.toggleView()}>Desktop View</button>\n        }\n      </div>\n    );\n  }\n}\n\n\n/******************** Create Walls ********************/\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  let nextNodesStack = [startNode];\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.shift();\n    if (currentNode === finishNode) return visitedNodesInOrder;\n\n    if (\n      !currentNode.isWall &&\n      (currentNode.isStart || !currentNode.isVisited)\n    ) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n      const {col, row} = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n    }\n  }\n  // return visitedNodesInOrder;\n}\n","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const nextNodesStack = [];\n  nextNodesStack.push(startNode);\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.pop();\n\n    if (currentNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n\n    if (\n      !currentNode.isWall &&\n      (currentNode.isStart || !currentNode.isVisited)\n    ) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n\n      const {col, row} = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n    }\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}